<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.6</version>
        <relativePath/>
    </parent>

    <groupId>com.maria</groupId>
    <artifactId>recipe-manager</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Recipe Manager</name>
    <description>Spring Boot project for managing recipes</description>

    <properties>
        <java.version>21</java.version>
    </properties>

    <dependencies>
        <!-- Necesare pentru DataSource (obligatoriu ca Flyway să se conecteze) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Web + validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Actuator + Prometheus -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>

        <!-- Flyway + PostgreSQL driver -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Test  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-launcher</artifactId>
            <version>1.12.2</version>
            <scope>test</scope>
        </dependency>



        <!--baza de date in memory-->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
        <!--COVERAGE-->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.11</version>
                <executions>
                    <execution>
                        <goals><goal>prepare-agent</goal></goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals><goal>report</goal></goals>
                    </execution>
                    <execution>
                        <id>check</id>
                        <phase>verify</phase>
                        <goals><goal>check</goal></goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <includes>
                                        <include>com.maria.recipe_manager.web.*</include>
                                        <include>com.maria.recipe_manager.service.*</include>
                                    </includes>
                                    <limits>
                                        <limit>
                                            <counter>INSTRUCTION</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.50</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- necesar pentru comanda spring-boot:run și packaging -->
            <!--<plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>-->
<!-- elimin pt a invata rularea aplicatiei ca una de Java clasic           -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.3.0</version>
                <configuration>
                    <archive>
                        <!--Punem in manifest clasa main si class path-ul, si ca toate dependentele vor sta in lib/ langa JAR-->
                        <manifest>
                            <mainClass>com.maria.recipe_manager.RecipeManagerApplication</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <!--acest plugin copiaza dependentele in target/lib-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- Trebuie să corespundă cu classpathPrefix=lib/ -->
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <!-- runtime = include și dependențele de runtime (ex.: driverul Postgres) -->
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--  PITest - mutanti -->
            <plugin>
                <groupId>org.pitest</groupId>
                <artifactId>pitest-maven</artifactId>
                <version>1.17.2</version>
                <dependencies>
                    <dependency>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-junit5-plugin</artifactId>
                        <version>1.2.1</version>
                        <exclusions>
                            <exclusion>
                                <groupId>org.junit.platform</groupId>
                                <artifactId>junit-platform-commons</artifactId>
                            </exclusion>
                            <exclusion>
                                <groupId>org.junit.platform</groupId>
                                <artifactId>junit-platform-engine</artifactId>
                            </exclusion>
                            <exclusion>
                                <groupId>org.junit.platform</groupId>
                                <artifactId>junit-platform-launcher</artifactId>
                            </exclusion>
                        </exclusions>
                    </dependency>
                </dependencies>

                <configuration>
                    <testPlugin>junit5</testPlugin>
                    <targetClasses>
                        <param>com.maria.recipe_manager.service.*</param>
                    </targetClasses>
                    <targetTests>
                        <param>com.maria.recipe_manager.*</param>
                    </targetTests>
                    <mutators>
                        <mutator>DEFAULTS</mutator>
                    </mutators>

                    <!-- DEBUG temporar, ca să nu pice build-ul când nu găsește mutații -->
                    <failWhenNoMutations>false</failWhenNoMutations>

                    <threads>1</threads>
                    <timeoutConstant>4000</timeoutConstant>
                    <verbose>true</verbose>

                    <excludedClasses>
                        <param>com.maria.recipe_manager.RecipeManagerApplication*</param>
                        <param>com.maria.recipe_manager.config.*</param>
                        <param>com.maria.recipe_manager.web.*Request*</param>
                        <param>com.maria.recipe_manager.web.*Response*</param>
                        <param>com.maria.recipe_manager.model.*</param>
                        <param>db.migration.*</param>
                    </excludedClasses>
                    <outputFormats>
                        <param>HTML</param>
                        <param>XML</param>
                    </outputFormats>
                    <historyInputFile>${project.build.directory}/pit-history/pitHistory.txt</historyInputFile>
                    <historyOutputFile>${project.build.directory}/pit-history/pitHistory.txt</historyOutputFile>
                </configuration>
            </plugin>


            <!-- asigură compilarea pe Java 21 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>${java.version}</release>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
            </plugin>
        </plugins>
    </build>
</project>

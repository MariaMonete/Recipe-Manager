services:
  postgres:
    image: postgres:16.4
    container_name: pg_recipe
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-recipedb}
      POSTGRES_USER: ${POSTGRES_USER:-recipe}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-recipe}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata_recipe:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recipe} -d ${POSTGRES_DB:-recipedb}"]
      interval: 5s
      timeout: 3s
      retries: 10


  recipe-manager:
    build:
      context: .
    image: recipe-manager
    container_name: recipe-manager
    env_file: .env
    ports:
      - "${APP_PORT:-8081}:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # (opțional, dar recomandat) setează explicit datasource-ul din env
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg_recipe:5432/${POSTGRES_DB:-recipedb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-recipe}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-recipe}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      # NECESITĂ curl (sau wget) în imaginea aplicației
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/actuator/health/readiness || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 30s # timp pt warmup+migratii Flyway

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      recipe-manager:
        condition: service_healthy

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      # Doar pentru local/dev:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      GF_USERS_DEFAULT_THEME: system
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards


volumes:
  pgdata_recipe:

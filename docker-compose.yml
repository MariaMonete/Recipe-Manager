services:
  postgres:
    image: postgres:16.4
    container_name: pg_recipe
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-recipedb}
      POSTGRES_USER: ${POSTGRES_USER:-recipe}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-recipe}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - pgdata_recipe:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-recipe} -d ${POSTGRES_DB:-recipedb}"]
      interval: 5s
      timeout: 3s
      retries: 10


  recipe-manager:
    build:
      context: .
    image: recipe-manager
    container_name: recipe-manager
    env_file: .env
    ports:
      - "${APP_PORT:-8081}:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # (opțional, dar recomandat) setează explicit datasource-ul din env
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg_recipe:5432/${POSTGRES_DB:-recipedb}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-recipe}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-recipe}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    healthcheck:
      # NECESITĂ curl (sau wget) în imaginea aplicației
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/actuator/health/readiness || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 12
      start_period: 30s # timp pt warmup+migratii Flyway

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: rm_prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules.yml:/etc/prometheus/rules.yml:ro
      - prom_data:/prometheus
    depends_on:
      - recipe-manager
      - rabbitmq
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.0
    container_name: rm_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rm_rabbit
    ports:
      - "5672:5672"     # portul protocolului AMQP
      - "15672:15672"   # interfața web (management UI)
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit disk_free_limit 1073741824"
    restart: unless-stopped


volumes:
  pgdata_recipe:
  prom_data:
  grafana_data:
